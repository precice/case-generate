name: Validate Example Configurations

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

jobs:
  process-examples:
    runs-on: ubuntu-latest

    steps:
    # Initial setup
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt install -y libopenmpi-dev jq

    - name: Install preCICE
      run: |
        wget https://github.com/precice/precice/releases/download/v3.1.2/libprecice3_3.1.2_noble.deb
        sudo apt install -y ./libprecice3_3.1.2_noble.deb

    - name: Setup Python environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools cython
        pip install -e .

    - name: Install config-checker
      run: |
        source venv/bin/activate
        git clone --recurse-submodules https://github.com/precice-forschungsprojekt/config-checker.git
        cd config-checker
        pip install -e .
        cd ..

    - name: Run precice tools check on originals
      run: |
        for file in $(find examples -path 'examples/0' -prune -o -name precice-config.xml -exec dirname {} \; | sort | uniq); do
          echo "Checking file: $file"
          precice-tools check "$file/precice-config.xml"
        done

    # Discover examples
    - name: Find all examples
      id: find-examples
      run: |
        EXAMPLES=$(find examples -path 'examples/0' -prune -o -name "topology.yaml" -exec dirname {} \; | sort | uniq)
        EXAMPLES_JSON=$(echo "$EXAMPLES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
        echo "examples=$EXAMPLES_JSON" >> $GITHUB_OUTPUT
        echo "Found examples: $EXAMPLES_JSON"

    # Process each example
    - name: Process examples
      env:
        EXAMPLES: ${{ steps.find-examples.outputs.examples }}
      run: |
        source venv/bin/activate

        # Process each example
        for example in $(echo "$EXAMPLES" | jq -r '.[]'); do
          echo "========================================"
          echo "Processing example: $example"
          example_name=$(basename "$example")

          # Check for YAML input file
          yaml_file="$example/topology.yaml"

          if [ -f "$yaml_file" ]; then
            echo "Generating configuration from $yaml_file"
            precice-gen -f "$yaml_file" -o "$(dirname "$yaml_file")" -v

            # Check if generation was successful
            if [ -f "$example/_generated/precice-config.xml" ]; then
              echo "Generated configuration found in $example/_generated/"
            else
              echo "Error: Generation failed - no precice-config.xml created"
              exit 1
            fi
          else
            echo "Using existing precice-config.xml"
            if [ ! -f "$example/precice-config.xml" ]; then
              echo "Error: No precice-config.xml found in $example"
              exit 1
            fi
          fi

          # Determine which config file to validate
          if [ -f "$example/_generated/precice-config.xml" ]; then
            config_file="$example/_generated/precice-config.xml"
          else
            config_file="$example/precice-config.xml"
          fi

          # Validate the configuration
          echo "Validating configuration at $config_file..."
          python config-checker/preciceconfigchecker/cli.py "$config_file" --debug
          echo "Validating configuration at $config_file... using precice tools check"
          precice-tools check "$config_file"
          echo "Validation successful for $example_name"
        done

    # Collect all generated artifacts
    - name: Collect generated configurations
      run: |
        # Create directory for artifacts
        mkdir -p artifacts

        # Find and copy all _generated directories
        find examples -type d -name "_generated" | while read -r gen_dir; do
          example_dir=$(dirname "$gen_dir")
          example_name=$(basename "$example_dir")

          # Copy the _generated directory to artifacts
          mkdir -p "artifacts/$example_name"
          cp -r "$gen_dir" "artifacts/$example_name/"

          # Also copy the original precice-config.xml if it exists
          #if [ -f "$example_dir/precice-config.xml" ]; then
          #  cp "$example_dir/precice-config.xml" "artifacts/$example_name/original_precice-config.xml"
          #fi
        done

        echo "Collected artifacts:"
        tree artifacts

    # Upload all artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: precice-configurations
        path: artifacts/
